import os
import json
import re
from telegram import Update
from telegram.ext import CallbackContext
from telegram import Bot
from telegram.error import BadRequest, Unauthorized
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

allowed_user_id = 1391595972

def process_message(update: Update, context: CallbackContext) -> None:
    allowed_chat_id = -1002140769164
    if update.effective_chat.id != allowed_chat_id:
        return

    user_id = update.effective_user.id
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å allowed_user_id –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –æ–Ω –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id == allowed_user_id and update.message.reply_to_message:
        replied_user_id = update.message.reply_to_message.from_user.id
        process_user_score(replied_user_id, text, update)
    else:
        process_user_score(user_id, text, update)

def process_user_score(user_id, text, update):
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∏—Å–µ–ª, –æ–±–æ–∑–Ω–∞—á–∞—é—â–∏—Ö –ø—É–Ω–∫—Ç—ã –∏ –∑–Ω–∞—á–µ–Ω–∏—è, –¥–æ–ø—É—Å–∫–∞—é—â–µ–µ –ø—Ä–æ–±–µ–ª—ã –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏—á–∏–Ω—ã
    match = re.search(r'(-?\d+)üü¢\s*(\d{1,2})\.?\s*(.*)', text)

    if match is not None:
        user_id = str(user_id)
        value = int(match.group(1))
        point_number = int(match.group(2))

        if not 1 <= point_number <= 18:
            update.message.reply_text('–¢–∞–∫–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–µ—Ç! –ù–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 18.')
            return

        if not os.path.isfile(f'sums_{user_id}.json'):
            with open(f'sums_{user_id}.json', 'w') as file:
                json.dump({}, file)

        with open(f'sums_{user_id}.json', 'r') as file:
            data = json.load(file)

        data[str(point_number)] = data.get(str(point_number), 0) + value

        with open(f'sums_{user_id}.json', 'w') as file:
            json.dump(data, file)

        sorted_data = {k: v for k, v in sorted(data.items(), key=lambda item: int(item[0]))}
        point_values = [f"{k}. {v}" for k, v in sorted_data.items()]
        sum_values = sum(sorted_data.values())

        custom_message = get_custom_message(point_number, sum_values)
        if custom_message:
            update.message.reply_text(custom_message)
        else:
            update.message.reply_text('\n'.join(point_values + [f'–°—É–º–º–∞ –≤—Å–µ—Ö –ø—É–Ω–∫—Ç–æ–≤: {sum_values}']))
    else:
        update.message.reply_text('–ß—Ç–æ–±—ã –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–æ—Ä–º–∞—Ç—É:\n'
                                  '1Ô∏è‚É£ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º —Å–ª–µ–¥—É–µ—Ç –∑–µ–ª–µ–Ω—ã–π –∫—Ä—É–∂–æ–∫ (üü¢).\n'
                                  '2Ô∏è‚É£ –ó–∞—Ç–µ–º –¥–æ–ª–∂–Ω–∞ –∏–¥—Ç–∏ —Ü–∏—Ñ—Ä–∞, –æ–±–æ–∑–Ω–∞—á–∞—é—â–∞—è –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ (–æ—Ç 1 –¥–æ 18), —Å —Ç–æ—á–∫–æ–π –∏–ª–∏ –±–µ–∑.\n'
                                  '3Ô∏è‚É£ –ü—Ä–∏—á–∏–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π.\n'
                                  '–ü—Ä–∏–º–µ—Ä—ã:\n'
                                  '   "10üü¢ 3. –ü—Ä–∏—á–∏–Ω–∞ –∑–∞ —á—Ç–æ –≤—ã –Ω–∞—á–∏—Å–ª—è–µ—Ç–µ"\n'
                                  '   "10üü¢ 3"\n'
                                  '   "10üü¢3. –ü—Ä–∏—á–∏–Ω–∞"\n'
                                  '   "10üü¢3"')

def set_custom_message(update: Update, context: CallbackContext) -> None:
    args = context.args
    if len(args) < 4:
        update.message.reply_text('–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set (–ø—É–Ω–∫—Ç) (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤) (—Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) (—Å–æ–æ–±—â–µ–Ω–∏–µ)')
        return

    point_number = int(args[0])
    score_threshold = int(args[1])
    user_tag = args[2]
    message = ' '.join(args[3:])

    custom_messages = {}
    if os.path.isfile('custom_messages.json'):
        with open('custom_messages.json', 'r') as file:
            custom_messages = json.load(file)

    custom_messages[point_number] = {'score_threshold': score_threshold, 'user_tag': user_tag, 'message': message}

    with open('custom_messages.json', 'w') as file:
        json.dump(custom_messages, file)

    update.message.reply_text(f'–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–Ω–∫—Ç–∞ {point_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.')
    context.bot.send_message(update.effective_chat.id, f'–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–Ω–∫—Ç–∞ {point_number}:\n{user_tag} {message}')

def get_custom_message(point_number, total_score):
    if os.path.isfile('custom_messages.json'):
        with open('custom_messages.json', 'r') as file:
            custom_messages = json.load(file)
            if str(point_number) in custom_messages:
                if total_score >= custom_messages[str(point_number)]['score_threshold']:
                    return custom_messages[str(point_number)]['message']
    return None

def top_scores(update: Update, context: CallbackContext) -> None:
    top_data = {}
    bot = context.bot

    for filename in os.listdir('.'):
        if filename.startswith('sums_') and filename.endswith('.json'):
            with open(filename, 'r') as file:
                data = json.load(file)
                user_id = filename.split('_')[1].split('.')[0]

                try:
                    user = bot.get_chat(user_id)
                    username = user.username if user.username else user.first_name
                    total_score = sum(data.values())
                    top_data[username] = total_score
                except Unauthorized as e:
                    logger.warning(f"Unauthorized access for user ID: {user_id}, error: {e}")
                    continue
                except BadRequest as e:
                    logger.warning(f"BadRequest error for user ID: {user_id}, error: {e}")
                    continue
                except Exception as e:
                    logger.error(f"An error occurred for user ID: {user_id}, error: {e}")
                    continue

    sorted_top = sorted(top_data.items(), key=lambda item: item[1], reverse=True)
    if sorted_top:
        top_message = "\n".join([f"–ù–∏–∫: @{username}: {score}" for username, score in sorted_top])
    else:
        top_message = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."

    update.message.reply_text(top_message)
